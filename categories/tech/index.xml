<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on Sourabh Deokar</title>
    <link>https://wilspi.com/categories/tech/</link>
    <description>Recent content in tech on Sourabh Deokar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Aug 2020 15:00:00 +0530</lastBuildDate><atom:link href="https://wilspi.com/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Elm: 2048 game in Elm</title>
      <link>https://wilspi.com/post/tech/2048-game-in-elmlang/</link>
      <pubDate>Sat, 08 Aug 2020 15:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/2048-game-in-elmlang/</guid>
      <description>Elm is a front-end programming language optimized for developer&amp;rsquo;s happiness. Elm basics are very straightforward, which is just the Elm Architecture.
The Elm Architecture  Model — the state of your application View — a way to turn your state into HTML Update — a way to update your state based on messages  You can read more about Elm here.
Here, we will construct the famous game: 2048 in Elm.</description>
    </item>
    
    <item>
      <title>Rust: Variables in Memory</title>
      <link>https://wilspi.com/post/tech/rust-variables-in-memory/</link>
      <pubDate>Wed, 05 Aug 2020 23:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/rust-variables-in-memory/</guid>
      <description>In every programming language, understanding how variables are stored in memory is a crucial point to make your program fast and efficient. Let&amp;rsquo;s look at how Rust does it.
Note: These are quick short notes, if you want to look in deep check out rustlang docs.
Ownership In programming languages, either a garbage collector is used which will clean up the memory used by the unused variables or the memory is explicitly freed by the programmer in the code.</description>
    </item>
    
    <item>
      <title>Rust: Slog and multiple drains</title>
      <link>https://wilspi.com/post/tech/slogging-multiple-drains/</link>
      <pubDate>Mon, 03 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/slogging-multiple-drains/</guid>
      <description>Slog is a structured logging library for Rustlang.
Structured logging is a concept that puts events over messages, events are logged with associated key-value data, not plain string messages. This helps in:
 processing log files for analytics searching and debugging (example: search log statements for particular user or request)  Logging Lets create a simple logger:
#[macro_use] extern crate slog; extern crate chrono; fn main() { let drain = slog::Discard; let root_logger = slog::Logger::root(drain, o!</description>
    </item>
    
    <item>
      <title>Setup multi user nix for Arch Linux</title>
      <link>https://wilspi.com/post/tech/setup-nix-arch-linux/</link>
      <pubDate>Sat, 01 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/setup-nix-arch-linux/</guid>
      <description>Here we are setting up nix for Arch Linux.
Multi User Setup From nix&amp;rsquo;s page:
 To allow a Nix store to be shared safely among multiple users, it is important that users are not able to run builders that modify the Nix store or database in arbitrary ways, or that interfere with builds started by other users. If they could do so, they could install a Trojan horse in some package and compromise the accounts of other users.</description>
    </item>
    
    <item>
      <title>Jinja template Inheritance using Database</title>
      <link>https://wilspi.com/post/tech/jinja-inheritance-using-db/</link>
      <pubDate>Fri, 31 Jul 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/jinja-inheritance-using-db/</guid>
      <description>Jinja is a web template engine for the Python programming language. A Jinja template is simply a text file and can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). A template contains variables and/or expressions, which get replaced with values when the template is rendered, thus serving dynamic content.
Commonly, templates are stored as files, either in git-repo or s3 buckets. Depending on your use case, you can store the templates in the database as well.</description>
    </item>
    
    <item>
      <title>Nix shell and Awesomeness: An Intro</title>
      <link>https://wilspi.com/post/tech/nix-shell-and-awesomeness/</link>
      <pubDate>Thu, 30 Jul 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/nix-shell-and-awesomeness/</guid>
      <description>Last year while working with @amitu, I came across this wonderful tool called Nix.
I have been using Nix for almost all my projects now. I have written nix recipes for:
rust, python, nodejs, elm, postgres, react, etc.
About Nix, its wiki says:
 Nix is a package manager and build system that parses reproducible build instructions specified in the Nix Expression Language, a pure functional language with lazy evaluation</description>
    </item>
    
    <item>
      <title>Django Middleware: log requests and responses</title>
      <link>https://wilspi.com/post/tech/django-middleware-to-log-requests/</link>
      <pubDate>Wed, 29 Jul 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/django-middleware-to-log-requests/</guid>
      <description>From Django&amp;rsquo;s context:
 Middleware is a framework of hooks into Django’s request/response processing.
It’s a light, low-level “plugin” system for globally altering Django’s input or output.
 Middleware is like a layer which processes every request and response. Instead of logging requests and responses in resp. views, its better to do at middleware layer which will log every incoming request. Why better?
 it will log unhandled requests/views one time job, no need to configure for every request/view  Here, we are using Django&amp;rsquo;s middleware semantics to construct a middleware which will log all requests and corresponding responses.</description>
    </item>
    
    <item>
      <title>Save the production with nginx</title>
      <link>https://wilspi.com/post/tech/save-production-via-nginx/</link>
      <pubDate>Wed, 29 Jul 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/save-production-via-nginx/</guid>
      <description>Quick nginx hack to save your production web server in case the web service starts crashing.
If you have been working in a production environment, you know at certain times your web service can crash due to some unknown reason (code failure). It will take some time to do the RCA and fix the issue. A quick hack is to have multiple web services running on different ports resp. that can take the load off if any of them goes down.</description>
    </item>
    
  </channel>
</rss>
