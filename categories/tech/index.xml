<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tech on wilspi | Sourabh</title>
    <link>https://wilspi.com/categories/tech/</link>
    <description>Recent content in tech on wilspi | Sourabh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 08 Aug 2020 15:00:00 +0530</lastBuildDate><atom:link href="https://wilspi.com/categories/tech/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction to Elm with 2048 game</title>
      <link>https://wilspi.com/post/tech/2048-game-in-elmlang/</link>
      <pubDate>Sat, 08 Aug 2020 15:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/2048-game-in-elmlang/</guid>
      <description>In this post I will be creating a small game, 2048 in Elm. 2048 is a game created by gabrielecirulli which went viral in 2014.
I chose 2048 because the game mechanics are simple which will help us understand Elm clearly. Also, I didn&amp;rsquo;t want to make another todo app.
You can play here.
The Game Mechanics?  There are some number tiles on the board (4x4). The number on the tile will be a power of 2 with minimum being 2.</description>
    </item>
    
    <item>
      <title>Structured Logging using Slog in Rust</title>
      <link>https://wilspi.com/post/tech/slogging-multiple-drains/</link>
      <pubDate>Mon, 03 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/slogging-multiple-drains/</guid>
      <description>Slog is a structured logging library for rust-lang.
Structured logging is a concept that puts events over messages, events are logged with associated key-value data, not plain string messages. This helps in:
 processing log files for analytics searching and debugging (example: search log statements for particular user or request)  Basic Logging with Slog Lets create a simple logger:
#[macro_use] extern crate slog; extern crate chrono; fn main() { let drain = slog::Discard; let root_logger = slog::Logger::root(drain, o!</description>
    </item>
    
    <item>
      <title>Jinja template Inheritance using Database</title>
      <link>https://wilspi.com/post/tech/jinja-inheritance-using-db/</link>
      <pubDate>Fri, 31 Jul 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/jinja-inheritance-using-db/</guid>
      <description>Jinja is a web template engine for the Python programming language. A Jinja template is simply a text file and can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). A template contains variables and/or expressions, which get replaced with values when the template is rendered, thus serving dynamic content.
Commonly, templates are stored as files, either in git-repo or s3 buckets. Depending on your use case, you can store the templates in the database as well.</description>
    </item>
    
    <item>
      <title>Log requests and responses with Django Middleware</title>
      <link>https://wilspi.com/post/tech/django-middleware-to-log-requests/</link>
      <pubDate>Wed, 29 Jul 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/django-middleware-to-log-requests/</guid>
      <description>From Django&amp;rsquo;s context:
 Middleware is a framework of hooks into Django’s request/response processing.
It’s a light, low-level “plugin” system for globally altering Django’s input or output.
 Middleware is like a layer which processes every request and response. Instead of logging requests and responses in resp. views, its better to do at middleware layer which will log every incoming request. Why better?
 it will log unhandled requests/views one time job, no need to configure for every request/view  Here, we are using Django&amp;rsquo;s middleware semantics to construct a middleware which will log all requests and corresponding responses.</description>
    </item>
    
    <item>
      <title>Save the production with Nginx hack</title>
      <link>https://wilspi.com/post/tech/save-production-via-nginx/</link>
      <pubDate>Thu, 12 Mar 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/save-production-via-nginx/</guid>
      <description>Quick nginx hack to save your production web server in case the web service starts crashing.
If you have been working in a production environment, you know at certain times your web service can crash due to some unknown reason (code failure). It will take some time to do the RCA and fix the issue. A quick hack is to have multiple web services running on different ports resp. that can take the load off if any of them goes down.</description>
    </item>
    
  </channel>
</rss>
