<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sourabh Deokar</title>
    <link>https://wilspi.com/</link>
    <description>Recent content on Sourabh Deokar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 10 Aug 2020 22:00:00 +0530</lastBuildDate>
    
	<atom:link href="https://wilspi.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Rust: Closures and Threads</title>
      <link>https://wilspi.com/post/tech/rust-threads-and-closures/</link>
      <pubDate>Mon, 10 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/rust-threads-and-closures/</guid>
      <description>Closures Closures is a function which has access to variables in the same scope in which it was defined. Annotating types in closure definition is not required, types can be inferred by the compiler.
Closures in Threads When using closure, variables defined in the same scope as the closure, are accessible inside the closure. But the same accessibility changes when closure runs in threads. Lets look at examples below.
Here:</description>
    </item>
    
    <item>
      <title>Nix Recipe: Setup Python</title>
      <link>https://wilspi.com/post/tech/nix-recipes/python/</link>
      <pubDate>Sun, 09 Aug 2020 21:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/nix-recipes/python/</guid>
      <description>This is a nix recipe for building and running python in a virtual nix environment.
  Create shell.nix with following:
let nixpkgs = import (builtins.fetchTarball https://github.com/NixOS/nixpkgs/archive/20.03.tar.gz) { overlays = []; config = {}; }; in with nixpkgs; stdenv.mkDerivation { name = &amp;quot;python-env&amp;quot;; nativeBuildInputs = [ zsh vim python37 python37Packages.pip python37Packages.virtualenv ]; # ENV variables PROJDIR = &amp;quot;${toString ./.}&amp;quot;; # Post Shell Hook shellHook = &#39;&#39; echo &amp;quot;Using ${python37.name}&amp;quot; [ !</description>
    </item>
    
    <item>
      <title>Learning Elm: 2048 game in Elm</title>
      <link>https://wilspi.com/post/tech/2048-game-in-elmlang/</link>
      <pubDate>Sat, 08 Aug 2020 15:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/2048-game-in-elmlang/</guid>
      <description>Elm is a frontend programming language optimised for developer&amp;rsquo;s happiness. Elm basics are very straightforward, which is just the Elm Architecture.
The Elm Architecture  Model — the state of your application View — a way to turn your state into HTML Update — a way to update your state based on messages  You can read more about Elm here.
Here, we will construct the famous game: 2048 in Elm.</description>
    </item>
    
    <item>
      <title>Rust: Smart Pointers</title>
      <link>https://wilspi.com/post/tech/rust-smart-pointers/</link>
      <pubDate>Fri, 07 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/rust-smart-pointers/</guid>
      <description>This is in DRAFT mode.
Pointer is a general concept in Computer Programming for a variable that stores memory address. In Rust, generally we use references to access the value stored at a memory address. References are simple pointers, that work within the limits of Rust&amp;rsquo;s ownership and borrowing concept. Lets look at other types which go beyond these limits.
Note: These are quick short notes, if you want to look in deep check out rustlang docs.</description>
    </item>
    
    <item>
      <title>Nix Recipe: Setup Nodejs</title>
      <link>https://wilspi.com/post/tech/nix-recipes/nodejs/</link>
      <pubDate>Thu, 06 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/nix-recipes/nodejs/</guid>
      <description>This is a nix recipe for building and running nodejs in a virtual nix environment.
  In your project folder, create a new file nodejs.nix and add following:
{ nixpkgs ? import &amp;lt;nixpkgs&amp;gt; {}, version, sha256 }: let inherit (nixpkgs) python37 utillinux stdenv autoPatchelfHook fetchurl binutils-unwrapped patchelf xcbuild; inherit (stdenv) mkDerivation; in mkDerivation { inherit version; name = &amp;quot;nodejs-${version}&amp;quot;; src = fetchurl { url = &amp;quot;https://nodejs.org/dist/v${version}/node-v${version}${if stdenv.isDarwin then &amp;quot;-darwin-x64&amp;quot; else &amp;quot;-linux-x64&amp;quot;}.</description>
    </item>
    
    <item>
      <title>Rust: Variables in Memory</title>
      <link>https://wilspi.com/post/tech/rust-variables-in-memory/</link>
      <pubDate>Wed, 05 Aug 2020 23:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/rust-variables-in-memory/</guid>
      <description>In every programming language, understanding how variables are stored in memory is a crucial point to make your program fast and efficient. Lets look at how Rust does it.
Note: These are quick short notes, if you want to look in deep check out rustlang docs.
Ownership In programming languages, either a garbage collector is used which will cleanup the memory used by the unused variables or the memory is explicitly freed by the programmer in the code.</description>
    </item>
    
    <item>
      <title>Nix Recipe: Setup Rust</title>
      <link>https://wilspi.com/post/tech/nix-recipes/rust/</link>
      <pubDate>Tue, 04 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/nix-recipes/rust/</guid>
      <description>This is a nix recipe for building and running rust in a virtual nix environment.
  Create a file rust-toolchain with following:
1.43.0 We are specifying rust version to install, here using 1.43.0. If using heroku, rust-toolchain file will determine which version will be used to build the application.
  Create shell.nix with following:
let # Mozilla Overlay moz_overlay = import ( builtins.fetchTarball &amp;quot;https://github.com/mozilla/nixpkgs-mozilla/archive/master.tar.gz&amp;quot; ); nixpkgs = import (builtins.</description>
    </item>
    
    <item>
      <title>Rust: Slog and multiple drains</title>
      <link>https://wilspi.com/post/tech/slogging-multiple-drains/</link>
      <pubDate>Mon, 03 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/slogging-multiple-drains/</guid>
      <description>Slog is a structured logging library for Rustlang.
Structured logging is a concept that puts events over messages, events are logged with associated key-value data, not plain string messages. This helps in:
 processing log files for analytics searching and debugging (example: search log statements for particular user or request)  Logging Lets create a simple logger:
#[macro_use] extern crate slog; extern crate chrono; fn main() { let drain = slog::Discard; let root_logger = slog::Logger::root(drain, o!</description>
    </item>
    
    <item>
      <title>Nix Recipe: Setup Postgresql</title>
      <link>https://wilspi.com/post/tech/nix-recipes/postgresql/</link>
      <pubDate>Sun, 02 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/nix-recipes/postgresql/</guid>
      <description>This is a nix recipe for building and running postgresql-12 in a virtual nix environment.
  Create your project folder and save the following file as shell.nix
let nixpkgs = import (builtins.fetchTarball https://github.com/NixOS/nixpkgs/archive/20.03.tar.gz) { overlays = []; config = {}; }; in with nixpkgs; stdenv.mkDerivation { name = &amp;quot;postgres-env&amp;quot;; buildInputs = []; nativeBuildInputs = [ zsh vim geos gdal nixpkgs-fmt # postgres-12 with postgis support (postgresql_12.withPackages (p: [ p.postgis ])) ]; postgresConf = writeText &amp;quot;postgresql.</description>
    </item>
    
    <item>
      <title>Setup multi user nix for Arch Linux</title>
      <link>https://wilspi.com/post/tech/setup-nix-arch-linux/</link>
      <pubDate>Sat, 01 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/setup-nix-arch-linux/</guid>
      <description>Here we are setting up nix for Arch Linux.
Multi User Setup From nix&amp;rsquo;s page:
 To allow a Nix store to be shared safely among multiple users, it is important that users are not able to run builders that modify the Nix store or database in arbitrary ways, or that interfere with builds started by other users. If they could do so, they could install a Trojan horse in some package and compromise the accounts of other users.</description>
    </item>
    
    <item>
      <title>Jinja template Inheritance using Database</title>
      <link>https://wilspi.com/post/tech/jinja-inheritance-using-db/</link>
      <pubDate>Fri, 31 Jul 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/jinja-inheritance-using-db/</guid>
      <description>Jinja is a web template engine for the Python programming language. A Jinja template is simply a text file and can generate any text-based format (HTML, XML, CSV, LaTeX, etc.). A template contains variables and/or expressions, which get replaced with values when the template is rendered, thus serving dynamic content.
Commonly, templates are stored as files, either in git repo or s3 buckets. Depending on your use case, you can store the templates in database as well.</description>
    </item>
    
    <item>
      <title>Nix shell and Awesomeness: An Intro</title>
      <link>https://wilspi.com/post/tech/nix-shell-and-awesomeness/</link>
      <pubDate>Thu, 30 Jul 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/nix-shell-and-awesomeness/</guid>
      <description>Last year while working with @amitu, I came across this wonderful tool called Nix.
I have been using Nix for almost all my projects now. I have written nix recipes for:
rust, python, nodejs, elm, postgres, react, etc.
About Nix, its wiki says:
 Nix is a package manager and build system that parses reproducible build instructions specified in the Nix Expression Language, a pure functional language with lazy evaluation</description>
    </item>
    
    <item>
      <title>Django Middleware: log requests and responses</title>
      <link>https://wilspi.com/post/tech/django-middleware-to-log-requests/</link>
      <pubDate>Wed, 29 Jul 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/django-middleware-to-log-requests/</guid>
      <description>From Django&amp;rsquo;s context:
 Middleware is a framework of hooks into Django’s request/response processing.
It’s a light, low-level “plugin” system for globally altering Django’s input or output.
 Middleware is like a layer which processes every request and response. Instead of logging requests and responses in resp. views, its better to do at middleware layer which will log every incoming request. Why better?
 it will log unhandled requests/views one time job, no need to configure for every request/view  Here, we are using Django&amp;rsquo;s middleware semantics to construct a middleware which will log all requests and corresponding responses.</description>
    </item>
    
    <item>
      <title>Save the production with nginx</title>
      <link>https://wilspi.com/post/tech/save-production-via-nginx/</link>
      <pubDate>Wed, 29 Jul 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/save-production-via-nginx/</guid>
      <description>Quick nginx hack to save your production web server in case the web service starts crashing.
If you have been working in production environment, you know at certain times your web service can crash due to some unknown reason (code failure). It will take some time to do the RCA and fix the issue. A quick hack is to have multiple web services running on different ports resp. that can take the load off, if any of them goes down.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://wilspi.com/_about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wilspi.com/_about/</guid>
      <description>About wilspi.com is
 written in Hugo with Anatole theme hosted by Google domain and Github Pages  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://wilspi.com/readme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://wilspi.com/readme/</guid>
      <description>wgi-content </description>
    </item>
    
  </channel>
</rss>