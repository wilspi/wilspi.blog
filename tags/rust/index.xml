<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>rust on Sourabh Deokar</title>
    <link>https://wilspi.com/tags/rust/</link>
    <description>Recent content in rust on Sourabh Deokar</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 05 Aug 2020 23:00:00 +0530</lastBuildDate><atom:link href="https://wilspi.com/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Rust: Variables in Memory</title>
      <link>https://wilspi.com/post/tech/rust-variables-in-memory/</link>
      <pubDate>Wed, 05 Aug 2020 23:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/rust-variables-in-memory/</guid>
      <description>In every programming language, understanding how variables are stored in memory is a crucial point to make your program fast and efficient. Let&amp;rsquo;s look at how Rust does it.
Note: These are quick short notes, if you want to look in deep check out rustlang docs.
Ownership In programming languages, either a garbage collector is used which will clean up the memory used by the unused variables or the memory is explicitly freed by the programmer in the code.</description>
    </item>
    
    <item>
      <title>Rust: Slog and multiple drains</title>
      <link>https://wilspi.com/post/tech/slogging-multiple-drains/</link>
      <pubDate>Mon, 03 Aug 2020 22:00:00 +0530</pubDate>
      
      <guid>https://wilspi.com/post/tech/slogging-multiple-drains/</guid>
      <description>Slog is a structured logging library for Rustlang.
Structured logging is a concept that puts events over messages, events are logged with associated key-value data, not plain string messages. This helps in:
 processing log files for analytics searching and debugging (example: search log statements for particular user or request)  Logging Lets create a simple logger:
#[macro_use] extern crate slog; extern crate chrono; fn main() { let drain = slog::Discard; let root_logger = slog::Logger::root(drain, o!</description>
    </item>
    
  </channel>
</rss>
